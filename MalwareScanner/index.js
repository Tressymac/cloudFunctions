const {Storage} = require('@google-cloud/storage');
const fs = require('fs-extra');
const csv = require('csv-parser');

// Variables
const storage = new Storage();
const map = new Map();
const sampleStorageBucket = storage.bucket('anais-pdfmalware-sample');
const sampleBucketName = 'anais-pdfmalware-sample';
const quarantineStorageBucket = storage.bucket('anais-pdfmalware-quarantine');
const quarantineBucketName = 'anais-pdfmalware-quarantine';
const maliciousStorageBucket = storage.bucket('anais-pdfmalware-malicious');
const maliciousBucketName = 'anais-pdfmalware-malicious';
const cleanStorageBucket = storage.bucket('anais-pdfmalware-clean');
const cleanBucketName = 'anais-pdfmalware-clean';
const dataFile = 'PDFMalware2022.csv';
const buckets = [maliciousBucketName, cleanBucketName];

// Main/Entrypoint function
const malwareScanner =  async (file, context) => {
    const [gcfDataInfo] = await quarantineStorageBucket.getFiles();
    const gcfInfoName = gcfDataInfo.map((file) => {
        return file.name;
    });
    
    fs.createReadStream(dataFile)
    .pipe(csv())
    .on('data', (row) => {
        map.set(row['key'], row['value']);
        // console.log(row.filename);
        readPDFDatabase(row, gcfInfoName);
    })
    .on('end', () => {
        console.log("All Done");
    });
};

malwareScanner();

async function readPDFDatabase(observation, gcfInfoName) {
    if (gcfInfoName.includes(observation.filename) && observation.Class == "Malicious"){
        moveFileBetweenBuckets(quarantineBucketName, observation.filename, maliciousBucketName, observation.filename)
        .catch(console.error);
        // console.log("This file is Bad: " + observation.filename);
    }else if (gcfInfoName.includes(observation.filename) && observation.Class == "Benign")
    {
        moveFileBetweenBuckets(quarantineBucketName, observation.filename, cleanBucketName, observation.filename)
        .catch(console.error);
        // console.log("This file is good: " + observation.filename);
    }
};

async function moveFileBetweenBuckets(originalBucketName, observationName, newBucketName, secondObservationName) {
  const quarantineBucket = storage.bucket(originalBucketName);
  const observationFileName = quarantineBucket.file(observationName);

  const newDestinationBucket = storage.bucket(newBucketName);
  const finalObservationFile = newDestinationBucket.file(secondObservationName);

  await observationFileName.move(finalObservationFile);

  console.log(`File ${observationName} was moved from ${originalBucketName} to ${newBucketName} as ${secondObservationName}.`);
};

exports.GCFBucketCounter = async (req, res) => {
    try {
        const results = await Promise.all(buckets.map(async (bucketName) => {
            const [files] = await storage.bucket(bucketName).getFiles();
            return { bucket: bucketName, FileCount: files.length };
        }));
        const fileAmount = results.map((file) => {
            return file
        });
        console.log(fileAmount[0].FileCount)
        res.status(200).json( results );
    } catch (error) {
        console.error(error);
        res.status(500).send('Oh no, looks like there is an internal server error');
    };
};